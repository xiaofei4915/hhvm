Description: Lots of typos.
 Lots of typos, most of them detected by lintian. Added the false positives
 to a lintian override file.
Author: David Mart√≠nez Moreno <ender@debian.org>
Forwarded: no
Last-Update: 2014-03-12

Index: hhvm/hphp/doc/options.compiler
===================================================================
--- hhvm.orig/hphp/doc/options.compiler
+++ hhvm/hphp/doc/options.compiler
@@ -207,7 +207,7 @@ a more precise partitioning.
 
 = GCCOptimization
 
-Default is disabled. This option allows to selectively decrease the compiler
+Default is disabled. This option allows one to selectively decrease the compiler
 optimization level for long functions. It is specified as:
 
   GCCOptimization {
Index: hhvm/hphp/neo/neo_hdf.c
===================================================================
--- hhvm.orig/hphp/neo/neo_hdf.c
+++ hhvm/hphp/neo/neo_hdf.c
@@ -1482,7 +1482,7 @@ static NEOERR* parse_attr(char **str, HD
     if (*s == '\0' || k_l == 0)
     {
       _dealloc_hdf_attr(attr);
-      return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+      return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
     }
     SKIPWS(s);
     if (*s == '=')
@@ -1537,7 +1537,7 @@ static NEOERR* parse_attr(char **str, HD
 	{
 	  _dealloc_hdf_attr(attr);
 	  string_clear(&buf);
-	  return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+	  return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
 	}
 	s++;
 	v = buf.buf;
@@ -1550,7 +1550,7 @@ static NEOERR* parse_attr(char **str, HD
 	if (*s == '\0')
 	{
 	  _dealloc_hdf_attr(attr);
-	  return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+	  return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
 	}
         v_l = s-v;
       }
@@ -1591,7 +1591,7 @@ static NEOERR* parse_attr(char **str, HD
   if (*s == '\0')
   {
     _dealloc_hdf_attr(attr);
-    return nerr_raise(NERR_PARSE, "Misformed attribute specification: %s", *str);
+    return nerr_raise(NERR_PARSE, "Malformed attribute specification: %s", *str);
   }
   *str = s+1;
   return STATUS_OK;
Index: hhvm/hphp/runtime/ext/ext_domdocument.cpp
===================================================================
--- hhvm.orig/hphp/runtime/ext/ext_domdocument.cpp
+++ hhvm/hphp/runtime/ext/ext_domdocument.cpp
@@ -415,7 +415,7 @@ static Variant dom_canonicalization(xmlN
       inclusive_ns_prefixes[nscount] = NULL;
     } else {
       raise_notice("Inclusive namespace prefixes only allowed in "
-                   "exlcusive mode.");
+                   "exclusive mode.");
     }
   }
   if (mode == 1) {
Index: hhvm/hphp/system/idl/stream.idl.json
===================================================================
--- hhvm.orig/hphp/system/idl/stream.idl.json
+++ hhvm/hphp/system/idl/stream.idl.json
@@ -359,7 +359,7 @@
         },
         {
             "name": "stream_wrapper_unregister",
-            "desc": "Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore().",
+            "desc": "Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or re-enable it later on with stream_wrapper_restore().",
             "flags": [
             ],
             "return": {
Index: hhvm/hphp/system/idl/xml.idl.json
===================================================================
--- hhvm.orig/hphp/system/idl/xml.idl.json
+++ hhvm/hphp/system/idl/xml.idl.json
@@ -117,7 +117,7 @@
                     "name": "separator",
                     "type": "String",
                     "value": "null_string",
-                    "desc": "With a namespace aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in seperator."
+                    "desc": "With a namespace-aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in separator."
                 }
             ]
         },
@@ -368,7 +368,7 @@
         },
         {
             "name": "xml_set_object",
-            "desc": "This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.",
+            "desc": "This function allows one to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.",
             "flags": [
             ],
             "return": {
Index: hhvm/hphp/system/php/spl/iterators/ArrayIterator.php
===================================================================
--- hhvm.orig/hphp/system/php/spl/iterators/ArrayIterator.php
+++ hhvm/hphp/system/php/spl/iterators/ArrayIterator.php
@@ -4,7 +4,7 @@
 /**
  * ( excerpt from http://php.net/manual/en/class.arrayiterator.php )
  *
- * This iterator allows to unset and modify values and keys while
+ * This iterator allows one to unset and modify values and keys while
  * iterating over Arrays and Objects.
  *
  * When you want to iterate over the same array multiple times you need to
Index: hhvm/hphp/system/php/spl/iterators/RecursiveArrayIterator.php
===================================================================
--- hhvm.orig/hphp/system/php/spl/iterators/RecursiveArrayIterator.php
+++ hhvm/hphp/system/php/spl/iterators/RecursiveArrayIterator.php
@@ -5,7 +5,7 @@
  * ( excerpt from http://php.net/manual/en/class.recursivearrayiterator.php
  * )
  *
- * This iterator allows to unset and modify values and keys while
+ * This iterator allows one to unset and modify values and keys while
  * iterating over Arrays and Objects in the same way as the ArrayIterator.
  * Additionally it is possible to iterate over the current iterator entry.
  *
Index: hhvm/hphp/test/zend/bad/ext/mbstring/tests/htmlent.php
===================================================================
--- hhvm.orig/hphp/test/zend/bad/ext/mbstring/tests/htmlent.php
+++ hhvm/hphp/test/zend/bad/ext/mbstring/tests/htmlent.php
@@ -4,7 +4,7 @@
 // &#64... are must be decoded on input these are not reencoded on output. 
 // If you see &#64;&#65;&#66; on output this means input encoding fails.
 // If you do not see &auml;... on output this means output encoding fails.
-// Using UTF-8 internally allows to encode/decode ALL characters.
+// Using UTF-8 internally allows one to encode/decode ALL characters.
 // &128... will stay as they are since their character codes are above 127
 // and they do not have a named entity representaion.
 ?>
@@ -13,4 +13,4 @@
 <?php mb_parse_str("test=&#38;&#64;&#65;&#66;&#128;&#129;&#130;&auml;&ouml;&uuml;&euro;&lang;&rang;", $test);
 print_r($test);
 ?>
-===DONE===
\ No newline at end of file
+===DONE===
Index: hhvm/hphp/system/idl/pdo.idl.json
===================================================================
--- hhvm.orig/hphp/system/idl/pdo.idl.json
+++ hhvm/hphp/system/idl/pdo.idl.json
@@ -1066,7 +1066,7 @@
                 },
                 {
                     "name": "debugDumpParams",
-                    "desc": "Dumps the informations contained by a prepared statement directly on the output. It will provide the SQL query in use, the number of parameters used (Params), the list of parameters, with their name, type (paramtype) as an integer, their key name or position, the value, and the position in the query (if this is supported by the PDO driver, otherwise, it will be -1).\n\nThis is a debug function, which dump directly the data on the normal output. TipAs with anything that outputs its result directly to the browser, the output-control functions can be used to capture the output of this function, and save it in a string (for example).\n\nThis will only dumps the parameters in the statement at the moment of the dump. Extra parameters are not stored in the statement, and not displayed.",
+                    "desc": "Dumps the information contained by a prepared statement directly on the output. It will provide the SQL query in use, the number of parameters used (Params), the list of parameters, with their name, type (paramtype) as an integer, their key name or position, the value, and the position in the query (if this is supported by the PDO driver, otherwise, it will be -1).\n\nThis is a debug function, which dump directly the data on the normal output. TipAs with anything that outputs its result directly to the browser, the output-control functions can be used to capture the output of this function, and save it in a string (for example).\n\nThis will only dumps the parameters in the statement at the moment of the dump. Extra parameters are not stored in the statement, and not displayed.",
                     "flags": [
                     ],
                     "return": {
Index: hhvm/hphp/runtime/ext/icu/ext_icu_rsrc_bundle.cpp
===================================================================
--- hhvm.orig/hphp/runtime/ext/icu/ext_icu_rsrc_bundle.cpp
+++ hhvm/hphp/runtime/ext/icu/ext_icu_rsrc_bundle.cpp
@@ -18,7 +18,7 @@ static Variant extractValue(ResourceBund
                             const icu::ResourceBundle& bundle) {
 #define EXTRACT_ERR(type) \
   if (U_FAILURE(error)) { \
-    data->setError(error, "Failed to retreive " #type " value"); \
+    data->setError(error, "Failed to retrieve " #type " value"); \
     return init_null(); \
   }
 
